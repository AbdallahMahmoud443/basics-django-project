"""
Django settings for django_basics_project project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent #* Root Path
TAMPLATES_DIR = F"{BASE_DIR}/templates"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(3fvf#j@mks8jhzu4_c8=6rim($dw2&)q#!#d!ql*!&2tq@l%-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_basics_app',
    'django_basics_app2',
    'django_basics_app3',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_basics_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TAMPLATES_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_basics_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS =[
    BASE_DIR/"static/",
]

STATIC_ROOT ="C:/Users/KTS/Desktop/static files" # used to collect static files in folder for production by write command (py manage.py collectstatic)


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#* Create Folder in root path
import os 
LOGGING_PATH = os.path.join(BASE_DIR,'Logs')
if not os.path.exists(LOGGING_PATH):
    os.makedirs(LOGGING_PATH)

LOGGING ={
    "version":1, # the dictConfig format version
    "disable_existing_loggers":False,  # retain the default loggers
    "formatters":{
        "verbose":{
            "format":'{asctime}-{filename}-{funcName}-{levelname}-{message}', #format of message print in console
            "style":"{",
        }
    },
    "handlers":{
        "console":{"class":"logging.StreamHandler","formatter":"verbose"},
        "myCunstomhandler":{
            "class":"logging.FileHandler",
            "formatter":"verbose",
            "level":"DEBUG",
            "filename":os.path.join(LOGGING_PATH,'myCustomLogs.log')
        }
    },
    "root":{
        "handlers":["console"],
        "level":"DEBUG" # start from DEBUG to heigher
    },
    "loggers":{ # All custom loggers
        "myCunstom_Logger":{
           "handlers":["myCunstomhandler"], # defined custom loggers in handlers Attributes
           "level":"DEBUG", # define level
           "propagate":False # if true work custom logger and root logger
        }
    }
}